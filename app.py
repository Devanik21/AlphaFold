import streamlit as st
import google.generativeai as genai

st.set_page_config(layout="wide", page_title="AlphaFold-like App")

# --- Preloaded Example ---
EXAMPLE_SEQUENCE_NAME = "Example Protein"
EXAMPLE_SEQUENCE = ">ExampleProtein\nMQIFVKTLTGKTITLEVEPSDTIENVKAKIQDKEGIPPDQQRLIFAGKQLEDGRTLSDYNIQKESTLHLVLRLRGG"

st.title("Protein Structure Prediction (AlphaFold-like UI)")

st.sidebar.header("Input")

if st.sidebar.button("Load Example Sequence"):
    st.session_state.sequence_input = EXAMPLE_SEQUENCE

sequence_input = st.sidebar.text_area(
    "Enter protein sequence (FASTA format or raw sequence):",
    height=250,
    placeholder=">MyProtein\nMQIFVKTLTGKTITLEVEPSDTIENVKAKIQDKEGIPPDQQRLIFAGKQLEDGRTLSDYNIQKESTLHLVLRLRGG",
    key="sequence_input" # Add a key to manage state
)

AVAILABLE_MODELS = {
    "Gemini 1.5 Flash (Latest)": "gemini-1.5-flash",
    "Gemini 2.0 Flash (Latest)": "gemini-2.0-flash", # Alias for gemini-1.0-pro
    "Gemini 2.5 Flash (Latest)": "gemini-2.5-flash",
}
selected_model_name = st.sidebar.selectbox("Choose a Gemini Model:", options=list(AVAILABLE_MODELS.keys()))

api_key_input = st.sidebar.text_input(
    "Enter your API Key:",
    type="password",
    placeholder="sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
)
predict_button = st.sidebar.button("Predict Structure")

st.sidebar.markdown("---")
st.sidebar.info(
    "This is a UI demonstration. "
    "Actual AlphaFold predictions require a complex backend and significant compute time."
)

if predict_button:
    if not sequence_input:
        st.sidebar.error("Please enter a protein sequence.")
    elif not api_key_input:
        st.sidebar.error("Please enter your API key.")
    else:
        st.subheader("Input Sequence")
        # Display the first few lines if it's long
        display_sequence = "\n".join(sequence_input.splitlines()[:5])
        if len(sequence_input.splitlines()) > 5:
            display_sequence += "\n..."
        st.text(display_sequence)

        # --- Gemini API Call ---
        try:
            genai.configure(api_key=api_key_input)
            chosen_model_id = AVAILABLE_MODELS[selected_model_name]
            model = genai.GenerativeModel(chosen_model_id)

            prompt = f"""
            Analyze the following protein sequence and provide a textual description of its likely structure.
            Focus on:
            1.  Predicted secondary structure elements (e.g., alpha-helices, beta-sheets, loops, turns) and their locations.
            2.  Potential overall fold or domain organization.
            3.  Possible functional implications based on structural motifs, if any can be inferred.
            4.  Key residue interactions or characteristics (e.g., hydrophobic core, active site residues if predictable).
            5.  Confidence level or regions of uncertainty if applicable.

            Protein Sequence:
            {sequence_input}

            Provide a detailed, text-based structural description.
            """

            with st.spinner(f"Predicting text-based protein structure with {selected_model_name}..."):
                response = model.generate_content(prompt)
                text_based_structure = response.text

            st.success("Text-based structure prediction complete!")
            st.subheader("Predicted Text-Based Structure (from Gemini)")
            st.text_area("Structure Description:", value=text_based_structure, height=400)
            st.caption("This output is generated by Google Generative AI.")

        except Exception as e:
            st.error(f"An error occurred while calling the Gemini API: {e}")
            st.error("Please check your API key, internet connection, and the input sequence.")
            # You might want to log the full error for debugging
            # print(f"Gemini API Error: {e}")


else:
    st.info("Enter a protein sequence in the sidebar and click 'Predict Structure' to see a mock result.")
